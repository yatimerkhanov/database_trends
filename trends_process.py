{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "class trends_process():\n",
    "\n",
    "    def __init__(self):\n",
    "        print(\"Preprocess object created\")\n",
    "\n",
    "    def drop(self, data, drop_strategies):\n",
    "        for column, strategy in drop_strategies.items():\n",
    "            data=data.drop(labels=[column], axis=strategy)\n",
    "\n",
    "        return data\n",
    "\n",
    "    def feature_engineering(self, data, engineering_strategies=1):\n",
    "        if engineering_strategies==1:\n",
    "            return self._feature_engineering1(data)\n",
    "\n",
    "        return data\n",
    "\n",
    "    def _feature_engineering1(self,data):\n",
    "\n",
    "        data=self._base_feature_engineering(data)\n",
    "\n",
    "\n",
    "        data['FareBin'] = pd.qcut(data['Fare'], 4)\n",
    "\n",
    "        data['AgeBin'] = pd.cut(data['Age'].astype(int), 5)\n",
    "\n",
    "        drop_strategy = {'Age': 1,  # 1 indicate axis 1(column)\n",
    "                         'Name': 1,\n",
    "                         'Fare': 1}\n",
    "        data = self.drop(data, drop_strategy)\n",
    "\n",
    "        return data\n",
    "\n",
    "    def _base_feature_engineering(self,data):\n",
    "        data['FamilySize'] = data['SibSp'] + data['Parch'] + 1\n",
    "\n",
    "        data['IsAlone'] = 1\n",
    "        data.loc[(data['FamilySize'] > 1), 'IsAlone'] = 0\n",
    "\n",
    "        data['Title'] = data['Name'].str.split(\", \", expand=True)[1].str.split('.', expand=True)[0]\n",
    "        min_lengtht = 10\n",
    "        title_names = (data['Title'].value_counts() < min_lengtht)\n",
    "        data['Title'] = data['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)\n",
    "\n",
    "        return data\n",
    "\n",
    "    def _label_encoder(self,data):\n",
    "        labelEncoder=LabelEncoder()\n",
    "        for column in data.columns.values:\n",
    "            if 'int64'==data[column].dtype or 'float64'==data[column].dtype or 'int64'==data[column].dtype:\n",
    "                continue\n",
    "            labelEncoder.fit(data[column])\n",
    "            data[column]=labelEncoder.transform(data[column])\n",
    "        return data\n",
    "\n",
    "    def _get_dummies(self, data, prefered_columns=None):\n",
    "\n",
    "        if prefered_columns is None:\n",
    "            columns=data.columns.values\n",
    "            non_dummies=None\n",
    "        else:\n",
    "            non_dummies=[col for col in data.columns.values if col not in prefered_columns ]\n",
    "\n",
    "            columns=prefered_columns\n",
    "\n",
    "\n",
    "        dummies_data=[pd.get_dummies(data[col],prefix=col) for col in columns]\n",
    "\n",
    "        if non_dummies is not None:\n",
    "            for non_dummy in non_dummies:\n",
    "                dummies_data.append(data[non_dummy])\n",
    "\n",
    "        return pd.concat(dummies_data, axis=1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:ml37]",
   "language": "python",
   "name": "conda-env-ml37-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
